#1.	Escreva um programa que pe√ßa dois n√∫meros ao usu√°rio e exiba a soma deles.
print ('Digite 2 Numeros para Somar')
numeros1 = int(input('digite o primeiro numero:   '))
numeros2 = int(input('digite o segundo numero:   '))
soma = numeros1 + numeros2
print('sua soma √©',soma)


#2.	Solicite dois n√∫meros e mostre o resultado da multiplica√ß√£o entre eles.
print ('Digite 2 Numeros para Multiplicar')
numeros1 = int(input('digite o primeiro numero:   '))
numeros2 = int(input('digite o segundo numero:   '))
resultado = numeros1 * numeros2
print('sua multipica√ß√£o √©',resultado)


#3.	Pe√ßa ao usu√°rio um n√∫mero e mostre o dobro desse n√∫mero.
print ('Digite um Numeros para saber o dobro')
numeros1 = int(input('digite o primeiro numero:   '))
resultado = numeros1 * 2
print('sua multipica√ß√£o √©',resultado)


#4.	Solicite tr√™s n√∫meros e exiba a m√©dia deles.
print ('Media')
print ('digite seus numeros para ter uma media')
nota1 = float(input('digite a primeira nota:   '))
nota2 = float(input('digite a segunda nota:   '))
nota3 = float(input('digite a terceira nota:   '))
soma = nota1 + nota2 + nota3
media = soma / 3
print('a media √©',media)


#5.	Pe√ßa ao usu√°rio dois n√∫meros e informe qual √© o maior e qual √© o menor.
print ('digite 2 numeros para saber qual √© maior e qual √© menor')
numeros1 = int(input('digite o primeiro numero:   '))
numeros2 = int(input('digite o segundo numero:   '))
if numeros1 > numeros2:
    print('o primeiro numero √© maior')
elif numeros2 > numeros1:
    print('o segundo numero √© maior')
else:
    print('os numeros s√£o iguais')


#6.	Solicite um n√∫mero e verifique se ele √© par ou √≠mpar.
print ('digite um numero para saber se √© par ou impar')
numeros1 = int(input('digite o primeiro numero:   '))
if numeros1 % 2 == 0:
    print('o numero √© par')
else:
    print('o numero √© impar')

    
#7.	Pe√ßa ao usu√°rio tr√™s n√∫meros e verifique se eles podem formar um tri√¢ngulo (a soma de dois lados deve ser maior que o terceiro lado).
print ('digite 3 numeros para saber se podem formar um triangulo')
numeros1 = int(input('digite o primeiro numero:   '))
numeros2 = int(input('digite o segundo numero:   '))
numeros3 = int(input('digite o terceiro numero:   '))
if numeros1 + numeros2 > numeros3 and numeros1 + numeros3 > numeros2 and numeros2 + numeros3 > numeros1:
    print('os numeros podem formar um triangulo')
else:
    print('os numeros n√£o podem formar um triangulo')


#8.	Verifique se um n√∫mero digitado pelo usu√°rio est√° entre 10 e 50.
print ('digite um numero para saber se esta entre 10 e 50')
numeros1 = int(input('digite o numero:   '))
if numeros1 >= 10 and numeros1 <= 50:
    print('o numero esta entre 10 e 50')
else:
    print('o numero n√£o esta entre 10 e 50')


#9.	Pe√ßa dois n√∫meros e verifique se s√£o iguais ou diferentes.
print ('digite dois numeros para saber se s√£o iguais ou diferentes')
numero1 = int(input('digite o primeiro numero:'))
numero2 = int(input('digite o segundo numero:'))
if numero1 == numero2:
    print('os numeros s√£o iguais')
else:
    print('os numeros s√£o diferentes')


#10.	Solicite um n√∫mero e informe se ele √© positivo, negativo ou zero.
print ('digite um numero para saber se √© positivo ou negativo ou zero')
numero1 = int(input('digite o numero'))
if numero1 > 0:
    print('o numero √© positivo')
elif numero1 < 0:
    print('o numero √© negativo')
else:
    print('o numero √© zero')


#11.	Escreva um programa que pe√ßa a idade do usu√°rio e verifique se ele pode votar (idade ‚â• 16).
print ('Digite sua idade para saber se pode votar ou n√£o')
idade = int(input('digite sua idade'))
if idade >= 16:
    print('Voc√™ pode votar')
else:
    print('Voc√™ n√£o pode votar')


#12.	Solicite ao usu√°rio um n√∫mero e verifique se ele √© m√∫ltiplo de 5.
print ('Digite um numero para saber se √© multiplo de 5')
numero5 = int(input('digite o numero:'))
if numero5 % 5 == 0:
    print(f'{numero5} √© multiplo de 5')
else:
    print(f'{numero5} n√£o √© multiplo de 5')


#13.	Pe√ßa um n√∫mero ao usu√°rio e verifique se ele est√° dentro da faixa de 1 a 100.
print ('digite um numero para saber se esta entre 1 e 100')
numero1 =int(input('digite um numero:'))
if numero1 >=1 and numero1 <=100:
    print (f'{numero1} est√° entre 1 e 100')
else:
    print(f'{numero1} n√£o est√° entre 1 e 100')


#14.	Solicite tr√™s n√∫meros e exiba-os em ordem crescente.
print ('digite 3 numeros para serem exibidos em ordem crescente')
numero1 = int(input('digite o primeiro numero:'))
numero2 = int(input('digite o segundo numero'))
numero3 = int(input('digite o terceiro numero'))
if numero1 > numero2 > numero3:
    print('os numeros em ordem crescente s√£o:', numero1, numero2, numero3)
elif numero1 > numero3 > numero2:
    print('os numeros em ordem crescente s√£o:', numero1, numero3, numero2)
elif numero2 > numero1 > numero3:
    print('os numeros em ordem crescente s√£o:', numero2, numero1, numero3)
elif numero2 > numero3 > numero1:
    print('os numeros em ordem crescente s√£o:', numero2, numero3, numero1)
elif numero3 > numero1 > numero2:
    print('os numeros em ordem crescente s√£o:', numero3, numero1, numero2)
elif numero3 > numero2 > numero1:
    print('os numeros em ordem crescente s√£o:', numero3, numero2, numero1)
else:
    print('os numeros s√£o iguais')


#15.	Pe√ßa ao usu√°rio o valor do sal√°rio e calcule um aumento de 10% se for menor que R$2000, sen√£o, o aumento ser√° de 5%.
print('Digite seu sal√°rio para saber o aumento:')
salario = float(input('Digite seu sal√°rio:'))
if salario < 2000:
    salario_aumento = salario * 1.10
    print(f'Seu sal√°rio teve um aumento de 10%, indo para R${salario_aumento:.2f}')
else:
    salario_aumento = salario * 1.05
    print(f'Seu sal√°rio teve um aumento de 5%, indo para R${salario_aumento:.2f}')


#16.	Desenvolva um programa que pergunte a altura e o peso de uma pessoa e calcule o IMC. Informe se est√° abaixo do peso, peso ideal ou sobrepeso.
print('C√°lculo de IMC')
peso = float(input('Digite seu peso atual: '))
altura = float(input('Digite sua altura: '))
imc = peso / (altura ** 2)

if imc < 18.5:
    print(f'Seu IMC atual √© {imc:.2f} e sua classifica√ß√£o atual √© Abaixo do Peso')
elif 18.5 <= imc <= 24.9:
    print(f'Seu IMC atual √© {imc:.2f} e sua classifica√ß√£o atual √© Peso Normal')
elif 25 <= imc <= 29.9: 
    print(f'Seu IMC atual √© {imc:.2f} e sua classifica√ß√£o atual √© Sobrepeso')
elif 30 <= imc <= 34.9: 
    print(f'Seu IMC atual √© {imc:.2f} e sua classifica√ß√£o atual √© Obesidade Classe I')
elif 35 <= imc <= 39.9:
    print(f'Seu IMC atual √© {imc:.2f} e sua classifica√ß√£o atual √© Obesidade Classe II')
else:
    print(f'Seu IMC atual √© {imc:.2f} e sua classifica√ß√£o atual √© Obesidade Classe III')


#17.	Crie um programa que receba a nota de um aluno e exiba "Aprovado" se for maior ou igual a 7, "Recupera√ß√£o" se estiver entre 5 e 6.9 e "Reprovado" se for menor que 5.
print ('Digite sua nota para saber se foi aprovado, reprovado ou se est√° de recupera√ß√£o')
nota = float(input('Digite sua nota:'))
if nota >= 7:
    print('Aprovado')
elif nota >= 5:
    print('Recupera√ß√£o')
else:
    print('Reprovado')


#18.	Solicite um ano ao usu√°rio e informe se ele √© bissexto (divis√≠vel por 4 e n√£o por 100, exceto se for divis√≠vel por 400). 
print ('Digite um ano para saber se √© bissexto')
ano = int(input('Digite o ano:'))
if ano % 4 == 0 and (ano % 100 != 0 or ano % 400 == 0):
    print('O ano √© bissexto')
else:
    print('O ano n√£o √© bissexto')


#19.	Pe√ßa ao usu√°rio para escolher um n√∫mero de 1 a 7 e exiba o dia da semana correspondente (1 = Domingo, 2 = Segunda...).
print ('digite um numero de 1 a 7 para saber o dia da semana')
dia = int(input('digite o numero:'))
if dia == 1:
    print('Domingo')
elif dia == 2:
    print('Segunda')
elif dia == 3:
    print('Ter√ßa')
elif dia == 4:
    print('Quarta')
elif dia == 5:
    print('Quinta')
elif dia == 6:
    print('Sexta')
elif dia == 7:
    print('Sabado')
else:
    print('o numero n√£o esta entre 1 e 7')


#20.	Crie um sistema simples de login: pe√ßa um nome de usu√°rio e senha e verifique se correspondem a um usu√°rio cadastrado no programa.
print ('Sistema de Login')
print ('Usuario: Admin')
print ('Senha: Admin123')
usuario = input('Digite seu usuario:')
senha = input('Digite sua senha:')
if usuario == 'Admin' and senha == 'Admin123':
    print('Login realizado com sucesso')
else:
    print('Usuario ou senha incorretos')









#Desafio
#Desafio
#Desafio
#Desafio
#Desafio
#Desafio





'''Desafio
Hist√≥ria:
Um hacker invadiu seu sistema e bloqueou um cofre digital contendo informa√ß√µes valiosas. Para destrav√°-lo, voc√™ precisa resolver uma sequ√™ncia de desafios de programa√ß√£o em Python.
Cada desafio correto fornecer√° um n√∫mero do c√≥digo final para abrir o cofre.
Desafios:
Os alunos devem completar os trechos de c√≥digo abaixo e obter a senha final (formada pelos n√∫meros das respostas corretas).
üî¢ Desafio 1: O primeiro n√∫mero do cofre (Operadores)
Complete o c√≥digo para calcular a senha correta:

# O hacker deixou esta equa√ß√£o incompleta. Resolva e descubra o n√∫mero.
senha1 = (10 + 5) * 2 / 5  # Complete a equa√ß√£o corretamente
print(int(senha1))  # O resultado deve ser um n√∫mero inteiro


üì• Desafio 2: Entrada e sa√≠da de dados
O hacker escondeu um n√∫mero secreto e deu uma dica. Pe√ßa ao usu√°rio para inserir um n√∫mero e verifique se est√° correto:

# O hacker diz que a senha √© igual ao dobro de um n√∫mero escolhido menos 4.
num = int(input("Digite um n√∫mero: "))
senha2 = (num-4)*2  # Complete a f√≥rmula
print("A senha parcial √©:", senha2)



üîç Desafio 3: Condicional ‚Äì Encontrando a chave certa
Agora voc√™ precisa verificar se a chave inserida est√° correta para destravar a √∫ltima parte do cofre:

# A chave correta deve ser maior que 50 e m√∫ltipla de 7.
chave = int(input("Digite a chave de acesso: "))

if chave > ____ == 0:  # Complete a condi√ß√£o correta
    print("Chave aceita! Pegue o √∫ltimo n√∫mero da senha: 9")
else:
    print("Chave incorreta! Tente novamente.")'''


#669







#Exerc√≠cios com While
#Exerc√≠cios com While
#Exerc√≠cios com While
#Exerc√≠cios com While
#Exerc√≠cios com While





#1.	Contagem de 1 a 10 Escreva um programa que exiba os n√∫meros de 1 a 10 usando um loop while.
contagem = 1
while contagem <= 10:
    print(contagem)
    contagem += 1


#2.	Soma de n√∫meros at√© zero Pe√ßa ao usu√°rio para digitar n√∫meros inteiros. Some esses n√∫meros at√© que ele digite 0. No final, exiba a soma total.
print('Soma de n√∫meros, digite 0 para parar e ver o resultado')
numero = int(input('Digite o primeiro n√∫mero: '))
soma = 0
while numero != 0:
    soma += numero
    numero = int(input('Digite o pr√≥ximo n√∫mero: '))
print(f'A soma total √© {soma}')


#3.	Adivinhe o n√∫mero Escolha um n√∫mero secreto (ex: 7). O usu√°rio deve tentar adivinhar, e o programa s√≥ para quando ele acertar.
print('Adivinhe o numero secreto de 1 a 10')
ns = 7
while True:
    numero = int(input('digite um numero:'))
    if numero > 10:
        print ('O numero esta acima do pormitido')
    elif numero < 1:
        print ('O numero esta abaixo do permitido')
    elif numero == ns:
        print(f'O numero esta correto')
        break
    else:
        print ('O numero esta incorreto')


#4.	Tabuada do 5 Utilize while para imprimir a tabuada do 5 (de 5√ó1 at√© 5√ó10).
print('Tabuada do 5')
tabuada = 5
contador = 1
while contador <= 10:
    resultado = tabuada * contador
    print(f'(Tabuada do 5) {tabuada} x {contador} = {resultado}')
    contador += 1                                          


#5.	Contagem regressiva Pe√ßa um n√∫mero ao usu√°rio e fa√ßa uma contagem regressiva at√© 0.
print('Digite um numero para ter uma ordem regressiva at√© 0')
numero = int(input('Numero:'))
contador = numero
while contador >= 0:
    print(contador)
    contador -= 1
print('Contagem finalizada')


#6.	Senha correta Pe√ßa para o usu√°rio inserir uma senha. Enquanto ele n√£o digitar "1234", continue pedindo.
print('Para logar digite a senha')
senha = 1234
while True:
    numero = int(input('Senha:'))
    if  numero == senha:
        print(f'Logado com Sucesso')
        break
    else:
        print ('Senha incorreta tente novamente')



#7.	Soma dos pares de 1 a 100 Utilize while para somar todos os n√∫meros pares de 1 a 100 e exiba o resultado.
print('Soma dos pares de 1 a 100')
numero = 2
soma = 0
while numero <= 100:
    soma += numero  
    numero += 2
print(f'A soma de todos os n√∫meros pares de 1 a 100 √©: {soma}')



#8.	Invertendo um n√∫mero Pe√ßa um n√∫mero inteiro ao usu√°rio e exiba ele ao contr√°rio (ex: 1234 ‚Üí 4321).
print('Digite um numero para inverte-lo')
num = int(input('Numero:'))
i = 0
while num > 0:
    un = num % 10
    i = (i*10) + un
    num //= 10
print(f'Seu numero ao contrario √© {i}')


#9.	N√∫mero primo Pe√ßa um n√∫mero ao usu√°rio e verifique se ele √© primo usando while.
print('Digite um numero para saber se √© primo ou n√£o')
num = int(input('numero:'))
if num <=1:
    print (f'{num} n√£o √© primo')
elif num == 2 or num == 3:
    print (f'{num} √© primo')
else:
    i = 2
    while i < num:
        if num % i == 0:
            print (f'{num} n√£o √© primo')
            break
        i += 1
    else:
        print (f'{num} √© primo')
    









#Desafio
#Desafio
#Desafio
#Desafio
#Desafio
#Desafio


#Crie um programa que mostre, na tela, um contador. O contador deve ser inicializado com zero. 
#O usu√°rio deve ter a op√ß√£o de incrementar uma unidade ao contador ou de encerrar o programa.
#Enquanto o usu√°rio continuar escolhendo incrementar o contador, o programa n√£o deve ser encerrado.
#O programa ser√° encerrado somente quando o usu√°rio decidir
#Utilize os comandos continue e break
#Exiba o contador 

print('Contagem de 10 N√∫meros a partir do 0 e pulando a quantidade escolhida')
contagem = 0  
n1 = int(input('N√∫mero a ser pulado: '))
while True:  
    for _ in range(10):  
        print(contagem)
        contagem += n1  
    print('Deseja continuar?')
    print('1 para continuar com o mesmo salto')
    print('2 para mudar o salto')
    print('3 para parar')
    continuar = int(input('Digite 1, 2 ou 3: '))
    if continuar == 1:
        continue  
    elif continuar == 2:
        n1 = int(input('Digite o novo n√∫mero a ser pulado: ')) 
    elif continuar == 3:
        print('Fim do Programa')
        break
    else:
        print('Op√ß√£o inv√°lida, encerrando programa.')
        break












#Exerc√≠cios com For
#Exerc√≠cios com For
#Exerc√≠cios com For
#Exerc√≠cios com For
#Exerc√≠cios com For
#Exerc√≠cios com For




#1.Fa√ßa um programa que fa√ßa uma Contagem de 1 a 10 e outra de 10 a 1

#De 1 a 10
contagem = 1
for i in range (10):
    print(contagem)
    contagem += 1

#De 10 a 1
contagem = 10
for i in range (10):
    print(contagem)
    contagem -= 1


#2.Soma dos primeiros 10 n√∫meros inteiros
soma = 0
for i in range (11):
    soma += i
    print(f'sua soma √© {soma}')


#3. Iterar sobre uma string e imprimir cada caractere Exemplo: 
#palavra = "Python"
#P
#y
#t
#h
#o
#n

palavra = "Python"
for letra in palavra:
    print(letra)



#4. Contar vogais em uma frase
#frase = "A tecnologia est√° mudando o mundo"
#vogais = "aeiouAEIOU"
vogais = "aeiouAEIOU"
frase = input('Digite a frase para saber as vogais:')
for letra in frase:
    if letra in vogais:
        print(letra)



#5. Exibir os n√∫meros pares de 1 a 20
contagem = 2
for i in range (10):
    print(contagem)
    contagem += 2




#6. Soma de n√∫meros √≠mpares de 1 a 50
soma = 0
for i in range (1 ,51):
    if i % 2 != 0:
        soma += i
        print(i)
    print(f'sua soma √© {soma}')











#Criando uma lista
#Criando uma lista
#Criando uma lista
#Criando uma lista
#Criando uma lista



#criando uma lista com alguns elementos e Exibindo a Lista
frutas = ['ma√ß√£', 'banana', 'laranja', 'uva']
print (frutas)


#criando uma lista com alguns elementos e Exibindo o segundo item da Lista
frutas = ['ma√ß√£', 'banana', 'laranja', 'uva']
print (frutas[2])


#criando uma lista com inteiro, float, string e booleano e exibindo a lista
itens = [1, 1.2, 'teste', 1 < 2 ]
print(f'os itens s√£o {itens}')

#puxando um elemento especifico da lista
minha_lista = [1, 2, 3, 4]
print(minha_lista[0]) #saida: 1
print(minha_lista[2]) #saida: 3


#modificando elementos:
minha_lista = [1, 2, 3, 4]
minha_lista[2] = 10 #modificando o terceiro elemento da lista para 10
print(minha_lista[0]) #saida: 0
print(minha_lista[1]) #saida: 1
print(minha_lista[2]) #saida: 2
print(minha_lista[3]) #saida: 3

#substituindo o 5¬∞ item
minha_lista = ['Sabonete', 'Shampoo', 'Pasta de Dente', 'Esponja', 'Papel Higienico']
minha_lista[4] = 'Jabuticaba'
print(minha_lista[0]) #saida: 0
print(minha_lista[1]) #saida: 1
print(minha_lista[2]) #saida: 2
print(minha_lista[3]) #saida: 3
print(minha_lista[4]) #Sa√≠da: 4

#adiciona um elemento apos o ultimo
carros = ['Chevrolet', 'Fiat', 'Wolksvagen', 'Toyota']
carros.append('fusca')
print(carros) #saida: [1,2,3,4,5]


#Criando uma lista vazia
lanche = []   #lista vazia
#adicionando lanches com .append ()
lanche.append('batata')
lanche.append('pizza')
lanche.append('hamburger')
#Exibindo lanches da lista
print(lanche)


#Criando uma lista vazia
lanches = []
#Pedindo o usuario para adicionar 3 lanches
for i in range(3):
    lanche = input(f'digite o {i+1}¬∞ lanche:')
    lanches.append(lanche)
#Exibindo lanches da lista
print('seus lanches s√£o:', lanches)

#Notas, Media, Aprova√ß√£o, Recupera√ß√£o e Reprovado
#Criando uma lista vazia
Notas = []
situacao = ''
#Pedindo o usuario para adicionar 5 notas
print('Digite duas 5 notas para saber a media e a situa√ß√£o escolar')
for i in range(5):
    nota = float(input(f'Digite o {i+1}¬∞ Nota: '))
    Notas.append(nota)
#Somando e fazendo a media
soma = Notas[0] + Notas[1] + Notas[2] + Notas[3] + Notas[4]
media = soma / 5
#Situa√ß√£o
if media >= 6:
    situacao = 'Aprovado'
elif media <= 5:
    situacao = 'Recupera√ß√£o'
else:
    situacao = 'Reprovado' 
#Exibindo lanches da lista
print('Suas notas s√£o:', Notas)
print('Sua media √©:', media)
print('E sua situa√ß√£o escolar √©: ', situacao)


#criando uma lista com alguns produtos e inserinddo Sab√£o em P√≥ na posi√ß√£o 2
lista = ['Sabonete', 'Shampoo', 'Pasta de Dente', 'Esponja', 'Papel Higienico']
lista.insert(2, 'Sab√£o em P√≥') #Inserindo na posi√ß√£o 2
print(lista) #Sa√≠da: ['Sabonete', 'Shampoo', 'Sab√£o em P√≥', 'Pasta de Dente', 'Esponja', 'Papel Higienico']


#criando uma lista com alguns produtos e inserindo em um lugar espefico
lista = ['Sabonete', 'Shampoo', 'Pasta de Dente', 'Esponja', 'Papel Higienico']
lista[2:1] = ['Sab√£o em P√≥', 'Desinfetante'] #Inserindo na posi√ß√£o 2 de 1
print(lista) #Sa√≠da: ['Sabonete', 'Shampoo', 'Sab√£o em P√≥', 'Desinfetante', 'Pasta de Dente', 'Esponja', 'Papel Higienico']

#criando uma lista e removendo 'Shampoo' da lista
lista = ['Sabonete', 'Shampoo', 'Pasta de Dente', 'Esponja', 'Papel Higienico']
lista.remove('Shampoo') #Removendo string 
print(lista) #Sa√≠da: ['Sabonete', 'Sab√£o em P√≥', 'Pasta de Dente', 'Esponja', 'Papel Higienico']

#criando uma lista e removendo 'Shampoo' da lista
lista = ['Sabonete', 'Shampoo', 'Pasta de Dente', 'Esponja', 'Papel Higienico']
lista.pop(2) #Remove o item na posi√ß√£o 2 (Shampoo)
print(lista) #Sa√≠da: ['Sabonete', 'Sab√£o em P√≥', 'Pasta de Dente', 'Esponja', 'Papel Higienico']

#criando duas listas e unindo ambas
lista = ['Sabonete', 'Shampoo', 'Pasta de Dente', 'Esponja', 'Papel Higienico']
lista2 = ['Arroz', 'Feij√£o', 'Macarr√£o', 'A√ß√∫car', 'Sal']
lista_combinada = lista + lista2 #Unindo as listas
print(lista_combinada) #Sa√≠da: ['Sabonete', 'Shampoo', 'Pasta de Dente', 'Esponja', 'Papel Higienico', 'Arroz', 'Feij√£o', 'Macarr√£o', 'A√ß√∫car', 'Sal']
print(lista_combinada[1:4]) #Sa√≠da ['Shampoo', 'Pasta de Dente', 'Esponja']

#criando duas listas, unindo ambas e exibindo quantos itens tem na lista
lista = ['Sabonete', 'Shampoo', 'Pasta de Dente', 'Esponja', 'Papel Higienico']
lista2 = ['Arroz', 'Feij√£o', 'Macarr√£o', 'A√ß√∫car', 'Sal']
lista_combinada = lista + lista2
print(len(lista_combinada)) #Sa√≠da 10

#criando duas listas, unindo ambas e exibindo em ordem numerica ou alfabetica
lista = ['Sabonete', 'Shampoo', 'Pasta de Dente', 'Esponja', 'Papel Higienico']
lista2 = ['Arroz', 'Feij√£o', 'Macarr√£o', 'A√ß√∫car', 'Sal']
lista_combinada = lista + lista2
lista_combinada.sort()#ordena a lista
print (lista_combinada)

#criando duas listas, unindo ambas e exibindo em ordem reversa numerica ou reversa alfabetica
lista = ['Sabonete', 'Shampoo', 'Pasta de Dente', 'Esponja', 'Papel Higienico']
lista2 = ['Arroz', 'Feij√£o', 'Macarr√£o', 'A√ß√∫car', 'Sal']
lista_combinada = lista + lista2
lista_combinada.sort()#odena a lista
lista_combinada.reverse()#inverte a lista
print (lista_combinada)

#sorteio
import random
#lista dos alunos
nomes = ['Lucas', 'Ana', 'Pedro', 'Maria', 'Jo√£o']
#sorteio
escolhido = random.choice(nomes)
print(f'O aluno escolhido foi: {escolhido}')

#pedir os nomes do usuario e quando digitar sim para o programa e sorteia
import random
try:
    n1 = int(input('Quantos participantes ir√£o participar do sorteio? '))   
    if n1 > 0:
        sorteio = []
        for i in range(n1):
            nome = input(f'Digite o nome do {i+1}¬∞ participante: ')
            sorteio.append(nome)
        print('O sorteio foi realizado e o ganhador √©:')
        ganhador = random.choice(sorteio)
        print(ganhador)
    else:
        print('O programa suporta apenas n√∫meros inteiros positivos.')
except ValueError:
    print('O programa suporta apenas n√∫meros inteiros. Caracteres n√£o s√£o permitidos.')

#list.copy()
#faz uma c√≥pia independente da lista (util para n√£o alterar a lista original)
lista1 = [1, 2, 3]
lista2 = lista1.copy()
lista2.append(4)
print(lista1) #[1, 2, 3]
print(lista2) #[1, 2, 3, 4]

#list.clear()
#Remove todos os itens da lista (Deixa ela vazia)
carrinho = ['camisa', 'cal√ßa', 'sapato']
carrinho.clear()
print(carrinho)  # Sa√≠da: []
#list.reverse()
nomes = ['Ana', 'Carlos', 'Beatriz']
nomes.reverse()
print(nomes)  # Sa√≠da: ['Beatriz', 'Carlos', 'Ana']















#Exercicios Lista

'''‚úÖ 1. Coloque itens nessa lista, modifique a estrutura do menu deixe o sistema do seu jeito.

compras = []

while True:
    print("\n===== LISTA DE COMPRAS =====")
    print("1 - Adicionar item")
    print("2 - Remover item")
    print("3 - Ver lista")
    print("4 - Ver posi√ß√£o de um item")
    print("5 - Contar quantas vezes um item aparece")
    print("6 - Limpar lista")
    print("0 - Sair")

    opcao = input("Escolha uma op√ß√£o: ")

    if opcao == "1":
        item = input("Digite o item que deseja adicionar: ")
        compras.append(item)
        print(f'"{item}" foi adicionado √† lista.')
    elif opcao == "2":
        item = input("Digite o item que deseja remover: ")
        if item in compras:
            compras.remove(item)
            print(f'"{item}" foi removido.')
        else:
            print("Item n√£o encontrado.")
    elif opcao == "3":
        print("\nSua lista de compras:")
        print(compras)
    elif opcao == "4":
        item = input("Digite o nome do item: ")
        if item in compras:
            print(f"O item '{item}' est√° na posi√ß√£o {compras.index(item)}.")
        else:
            print("Item n√£o encontrado.")
    elif opcao == "5":
        item = input("Digite o item para contar: ")
        qtd = compras.count(item)
        print(f"O item '{item}' aparece {qtd} vezes na lista.")
    elif opcao == "6":
        compras.clear()
        print("Lista de compras esvaziada!")
    elif opcao == "0":
        print("Saindo... At√© a pr√≥xima!")
        break
    else:
        print("Op√ß√£o inv√°lida. Tente novamente.")'''

compras = []

while True:
    print("\n===== LISTA DE COMPRAS =====")
    print("1 - Adicionar item")
    print("2 - Remover item")
    print("3 - Ver lista")
    print("4 - Ver posi√ß√£o de um item")
    print("5 - Contar quantas vezes um item aparece")
    print("6 - Limpar lista")
    print("0 - Sair")

    opcao = input("Escolha uma op√ß√£o: ")

    if opcao == "1":
        item = input("Digite o item que deseja adicionar: ")
        compras.append(item)
        print(f'"{item}" foi adicionado √† lista.')

    elif opcao == "2":
        item = input("Digite o item que deseja remover: ")
        if item in compras:
            compras.remove(item)
            print(f'"{item}" foi removido.')
        else:
            print("Item n√£o encontrado.")

    elif opcao == "3":
        if not compras:
            print('\nSua lista est√° vazia')
        else:
            print("\nSua lista de compras:")
            print(compras)

    elif opcao == "4":
        item = input("Digite o nome do item: ")
        if item in compras:
            print(f"O item '{item}' est√° na posi√ß√£o {compras.index(item)}.")
        else:
            print("Item n√£o encontrado ou n√£o existe.")

    elif opcao == "5":
        item = input("Digite o item para contar: ")
        qtd = compras.count(item)
        if qtd > 0:
            print(f"O item '{item}' aparece {qtd} vezes na lista.")
        else:
            print(f"O item '{item}' n√£o existe na lista ou n√£o foi encontrado.")

    elif opcao == "6":
        compras.clear()
        if not compras:
            print('A lista j√° est√° vazia')
        else:
            print("Lista de compras esvaziada!")

    elif opcao == "0":
        print("Saindo... At√© a pr√≥xima!")
        break

    else:
        print("Op√ß√£o inv√°lida. Tente novamente.")


#‚úÖ 2. Criando uma lista com append()
#Enunciado:
# Pe√ßa ao usu√°rio para digitar 5 nomes e adicione cada nome √† lista usando .append().
# Depois, imprima a lista completa.

nomes = []
print ('Digite 5 nomes para serem exibidos na lista de forma alfabetica:')
for i in range(5):
    nome = (input(f'Digite o {i+1}¬∞ Nome: '))
    nomes.append(nome)
    nomes.sort()
print (nomes)

#‚úÖ 3. Inserindo em posi√ß√£o espec√≠fica
#Enunciado:
# Crie uma lista com 3 frutas.
# Depois use .insert() para adicionar uma fruta na posi√ß√£o 1.
# Mostre a nova lista.

lista = ['Uva', 'Banana', 'Ma√ß√£']
lista.insert(1, 'Morango')
print(lista)

#‚úÖ 4. Removendo com remove()
#Enunciado:
# Crie uma lista de 4 cores.
# Pe√ßa ao usu√°rio para digitar uma cor para remover da lista.
# Use .remove() e mostre a lista atualizada.

cor = ['Verde', 'Azul', 'Vermelho', 'Amarelo']
print (cor)
cor_remov = input('Digite uma cor Da lista para ser removida: ')
if cor_remov in cor:
    cor.remove(cor_remov)
    print(cor)
else:
    print('Cor n√£o encontrada na lista')

#‚úÖ 5. Removendo com pop()
#Enunciado:
# Crie uma lista com 5 n√∫meros.
# Use .pop(2) para remover o n√∫mero da terceira posi√ß√£o.
# Mostre o n√∫mero removido e a lista atualizada.

Lista_num = [10, 20, 30, 40, 50]
print(f'Lista Completa', Lista_num)
print(f'O numero {Lista_num[2]} na terceira posi√ß√£o ser√° removido')
Lista_num.pop(2)
print('N√∫mero removido! \nSua lista atual √©: ', Lista_num)

#‚úÖ 6. Verificando se um item est√° na lista
#Enunciado:
# Crie duas listas: uma de frutas e outra de legumes.
# Pe√ßa ao usu√°rio para digitar o nome de um alimento.
# Use if e elif para verificar em qual lista ele est√° e imprima a resposta.

frutas = ["ma√ß√£", "banana", "laranja", "uva", "abacaxi"]
legumes = ["cenoura", "batata", "br√≥colis", "beterraba", "abobrinha"]
print ('Digite o nome de um alimento para verificar em qual lista est√°:')
alimento = (input('Alimento: '))
if alimento in frutas:
    print (f'{alimento}, est√° na lista frutas')
elif alimento in legumes:
    print (f'{alimento}, est√° na lista legumes')
else:
    print (f'{alimento}, n√£o est√° em nenhuma das listas ou foi digitado incorretamente')

#‚úÖ 7. Sorteando um nome com random.choice()
#Enunciado:
# Crie uma lista com nomes de 5 alunos.
# Use random.choice() para sortear um aluno e imprimir o nome sorteado.

import random
nomes = ['Rafael', 'Roger', 'Henrique', 'Arthur', 'Kayk']
escolhido = random.choice(nomes)
print(f'O aluno escolhido foi: {escolhido}')

#‚úÖ 8. Contando repeti√ß√µes com count()
#Enunciado:
# Crie uma lista com v√°rios n√∫meros repetidos.
# Pe√ßa ao usu√°rio para digitar um n√∫mero e diga quantas vezes ele aparece na lista.

Numeros = [1, 2 ,3, 5, 6, 8 ,5 ,6, 9, 14, 24, 35, 1, 2, 9, 3, 2, 1]
print('Digite um n√∫mero para saber quantas vezes ele aparece na lista:')
numero = int(input('N√∫mero escolhido: '))
quantidade = Numeros.count(numero)
print(f'O n√∫mero {numero} repetiu {quantidade} vezes.')

#‚úÖ 9. Encontrando a posi√ß√£o com index()
#Enunciado:
# Crie uma lista com nomes de cidades.
# Pe√ßa ao usu√°rio para digitar o nome de uma cidade e diga qual a posi√ß√£o dela na lista usando .index().

cidades = ['S√£o Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife']
print('Digite o nome de uma cidade para saber a posi√ß√£o dela na lista: ')
cidade = input('Cidade escolhida: ')
if cidade in cidades:
    posicao = cidades.index(cidade)
    print(f'A cidade "{cidade}" est√° na posi√ß√£o {posicao} da lista')
else:
    print(f'A cidade "{cidade}" n√£o foi encontrada na lista')

#‚úÖ 10. Limpando uma lista com .clear()
#Enunciado:
# Crie uma lista com qualquer conte√∫do (animais, objetos, etc).
# Mostre a lista, depois use .clear() para esvazi√°-la.
# Mostre a lista novamente.

objetos = ['celular', 'caderno', 'caneta', 'mochila', '√≥culos']
print('Lista original de objetos:')
print(objetos)
objetos.clear()
print('\nLista ap√≥s usar .clear():')
print(objetos)

#‚úÖ 11. Mini menu interativo
#Enunciado:
# Monte um menu com input() onde o usu√°rio pode:
#‚Ä¢	Adicionar um item
#‚Ä¢	Ver a lista
#‚Ä¢	Remover um item
#‚Ä¢	Sair do programa
#Use um while True: com if, elif e break.

compras = []

while True:
    print("\n===== LISTA DE COMPRAS =====")
    print("1 - Adicionar item")
    print("2 - Remover item")
    print("3 - Ver lista")
    print("0 - Sair")

    opcao = input("Escolha uma op√ß√£o: ")

    if opcao == "1":
        item = input("Digite o item que deseja adicionar: ")
        compras.append(item)
        print(f'"{item}" foi adicionado √† lista.')

    elif opcao == "2":
        item = input("Digite o item que deseja remover: ")
        if item in compras:
            compras.remove(item)
            print(f'"{item}" foi removido.')
        else:
            print("Item n√£o encontrado.")

    elif opcao == "3":
        if not compras:
            print('\nSua lista est√° vazia')
        else:
            print("\nSua lista de compras:")
            print(compras)
    elif opcao == "0":
        print("Saindo... At√© a pr√≥xima!")
        break

    else:
        print("Op√ß√£o inv√°lida. Tente novamente.")











#Tupla
#Tupla
#Tupla
#Tupla
#Tupla
#Tupla
#Tupla
#Tupla


#Tupla Simples
tupla = (10, 20, 30, 'teste')
a, b, c, d = tupla
print(a,b,c,d) #Sa√≠da: 10 20 30 teste


#Jun√ß√£o de duas ou mais Tuplas
tupla1 = (1, 'Tup1', 2)
tupla2 = (3, 'Tup2', 4)
tupla_concatenada = tupla1 + tupla2
print(tupla_concatenada) #Sa√≠da: (1, 'Tup1', 2, 3, 'Tup2', 4)


#Repetindo a tupla
tupla = (1,2)
tupla_repetida = tupla * 3
print(tupla_repetida) #Sa√≠da: (1,2,1,2,1,2)


#Retornando o Maior valor da tupla
tupla = (1,5,3,7,2)
print(max(tupla)) #Sa√≠da: 7


#Retorna o Valor minimo da tupla
tupla = (1,5,3,7,2)
print(min(tupla)) #Sa√≠da: 1


#Retorna a soma dos numeros da tupla
tupla = (1,2,3,4)
print(sum(tupla)) #Sa√≠da: 10


#Count e Index
tupla = (1,2,3,2,4,2)
#Count
print(tupla.count(2))#Sa√≠da: 3 (o numero 2 aparece 3 vezes)
#Index
print(tupla.index(3))#Sa√≠da: 2 (posi√ß√£o do primeiro 3 da tupla)


#Puxa um local exato da tupla
minha_tupla = (1,2,3)
print(minha_tupla[0]) #Sa√≠da: 1
print(minha_tupla[-1])#Sa√≠da: 3 (√∫ltimo elemento) Numeros negativos contam na lista de tras pra frente


#Tupla dentro de Tupla
tupla_pessoas = (('Alice', 25), ('Bruno', 30), ('Carla', 22))
#Acessando a idade do segundo elemento (√≠ndice 1)
idade_segundo = tupla_pessoas[1][1]
print(f'A idade do segundo elemento √©: {idade_segundo}')

#outro exemplo:
loc = (('Casa', -21.119574, -44.224794), ('Trabalho', -21.129347, -44.162196), ('Senac', -21.134943, -44.261105 ), ('Sitio', -21.048978, -44.200247))
latitude = loc[1][1]
longitude = loc[1][2]
dados = loc[1][0]
print(f'Seu local √©: {dados}')
print(f'A latitude do {dados} o √©: {latitude}')
print(f'A longitude do {dados} √©: {longitude}')


#converter lista em tupla
lista = [1,2,3,4,5]
tupla = tuple(lista) #convertendo lista para tupla
print('Tupla convertida:', tupla)


#convertedo tupla em lista
tupla = (1,2,3,4,5)
lista = list(tupla) #convertendo  tupla para lista
print('Lista conveertida:', lista)


#ciar uma tupla com 8 nomes, converter em lista, criar estrutura de repeti√ß√£o pra digitar nomes  ,para continuar ou parada, voltar para tupla
tupla = ('Ana', 'Bruno', 'Carlos', 'Diana', 'Eduardo', 'Fernanda', 'Gustavo', 'Helena')
lista = list(tupla)
print('A Tupla √©:', tupla)
print('Sua Tupla foi convertida para Lista')
print('A lista √©:', lista) 
i=0 
while True:
    nome = (input(f'Digite o {i+1}¬∞ Nome: '))
    lista.append(nome)
    continuar = int(input('Digite 1 para continuar e 2 para parar : '))
    if continuar == 1:
        i += 1
    elif continuar == 2:
        print('A lista final √©:', lista)
        print('Convertendo a lista para tupla')
        tupla = tuple(lista)
        print('A Tupla final √©:', tupla)
        break
    else:
        print('Op√ß√£o inv√°lida, encerrando programa.')
        break














    #conjutos
    #conjutos
    #conjutos
    #conjutos
    #conjutos

#cria√ß√£o de conjunto
meu_conjunto = {1,2,3,4,5}
#ou 
meu_conjunto = set([1,2,3,4,5])

#Conjunto Vazio: Para criar um conjunto vazio, √© necess√°rio usar a fun√ß√£o set().
#Usar {} cria  um dicionario vazio, n√£o um conjunto vazio

conjunto_vazio = set()

#Acessando os elementos de um conjunto:
#como os conjuntos s√£o n√£o ordenados, n√£o podemos acessar os elementos diretamente por indice. Para iterar sobre os elementos de um conjunto, usamos loops, como o for:

meu_conjunto = {1,2,3,4,5}
for item in meu_conjunto:
    print(item)

#adicionando elemento
meu_conjunto = {1,2,3,4,5}
meu_conjunto.add(6)
print(meu_conjunto) #saida {1,2,3,4,5,6}

#removendo elementos (se o elemento n√£o existir ser√° gerado um erro)
meu_conjunto = {1,2,3,4,5,6}
meu_conjunto.remove(3)
print(meu_conjunto) #saida {1,2,4,5,6}

#use discard() para remover um elemento, mas sem gerar erro caso o elemento n√£o exista
#elemento n√£o exista:
meu_conjunto = {1,2,3,4,5}
meu_conjunto.discard(10) #N√£o gera erro, mesmo que o 10 n√£o esteja no conjunto
print(meu_conjunto) #saida {1,2,3,4,5}


#Uni√£o de conjuntos
conj1 = {1,2,3,4}
conj2 = {3,4,5,6}
print('primeiro conjunto', conj1)
print('segundo conjunto', conj2)
uniao = conj1.union(conj2)
intersec = conj1.intersection(conj2)
difer= conj1.difference(conj2)
difer_simetrica = conj1.symmetric_difference(conj2)
print(uniao)
print(intersec)
print(difer)
print(difer_simetrica)


#Verificando se um elemento est√° no conjunto
frutas = {'ma√ß√£', 'banana', 'laranja'}
print('banana' in frutas) #Sa√≠da: True
print('uva' in frutas) #Sa√≠da: False


#Verificar se todos os elementos de A est√£o em B
a = {1, 2}
b = {1, 2, 3}
print(a.issubset(b)) #Sa√≠da: True (A √© subconjunto de B)







#Dicionario
#Dicionario
#Dicionario
#Dicionario
#Dicionario
#Dicionario
#Dicionario

#voce pode criar um dicionario usando chaves {} ou a fun√ß√£o dict {}
meu_dict = {'nome': 'jo√£o', 'idade': 25, 'cidade': 's√£o paulo'}
#usando a fun√ß√£o dict
meu_dict = dict(nome='jo√£o', idade=25, cidade='s√£o paulo')


#acessando elemento
meu_dict = dict(nome='jo√£o', idade=25, cidade='s√£o paulo')
print(meu_dict['nome']) #Sa√≠da: Jo√£o
print(meu_dict['idade']) #Sa√≠da: 25
print(meu_dict['cidade']) #Sa√≠da: S√£o Paulo


#adicionando ou alterando um valor
meu_dict = dict(nome='jo√£o', idade=25, cidade='s√£o paulo')
meu_dict['idade'] = 26 #modifica o valor da chave "idade"
meu_dict['profissao'] = 'Engenheiro' #adiciona um novo par de chav-valor
print(meu_dict)


#removendo elementos de um Dicionario
#Removendo uma chave com Del
meu_dict = dict(nome='jo√£o', idade=25, cidade='s√£o paulo')
del meu_dict['cidade']
print(meu_dict) #Sa√≠da: {'nome': 'jo√£o', 'idade': 25}


#copiar um dicionario
novo_dict = meu_dict.copy()


#mesclar dois dicionarios
dict1 = {'a': 1, 'b': 2}
dict2 = {'c': 3, 'd': 4}
dict1.update(dict2) 
print(dict1) #dict1 agora √© {'a': 1, 'b': 2, 'c': 3, 'd': 4}


#verificar se uma chave existe
meu_dict = dict(nome='jo√£o', idade=25, cidade='s√£o paulo')
if 'nome' in meu_dict:
    print('nome est√° presente')


#dicionario aninhado
meu_dict = {
    'pessoa1': {'nome': 'Jo√£o', 'idade': 25},
    'pessoa2': {'nome': 'Maria', 'idade': 30}
}
print(meu_dict['pessoa1']['nome']) #Sa√≠da: Jo√£o


#Iterando sobre um dicionario
pessoa = {
    'nome': 'Ana',
    'idade': 30,
    'cidade': 'Belo Horizonte'
}

for chave in pessoa(): #interar somente a chave aqui no retorno do valor
    print(chave)
for valor in pessoa.values():  #aqui ja retorna somente o valor pois usamos o .values()
    print(valor)